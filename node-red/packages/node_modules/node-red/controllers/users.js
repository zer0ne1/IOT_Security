const { Op } = require("sequelize");
const db = require("../utils/db");
const Sequelize = require("sequelize")

const get = async (req, res) => {
    const {textSearch, permission_id} = req.query;
    let filter = {};
    if(textSearch) {
        filter.username = {[Op.substring]: textSearch}
    }
    if(permission_id) {
        filter.permission_id = permission_id
    }
    const {count, rows} = await db.users.findAndCountAll({
        where: {
            ...filter,
            status: 1
        },
        include: [
            {model: db.permissions, as: 'permission', attributes: []}
        ],
        attributes:['id', 'username', 'flows', 'permission_id', [Sequelize.literal('permission.detail'), 'permissions'], [Sequelize.literal('permission.name'), 'role']]
    });
    res.set('Content-Range', count).send({
        total: rows.length,
        data: rows
    })
}

const getById = async (req, res) => {
    const data = await db.users.findOne({
        where: { id: req.params.id },
            include: [
                {model: db.permissions, as: 'permission', attributes: []}
            ],
            attributes:['id', 'username', 'flows', 'permission_id', [Sequelize.literal('permission.detail'), 'permissions'], [Sequelize.literal('permission.name'), 'role']]
        });
    if (!data) res.status(404).send("user not found!");
    else {
        res.send(data);
    }
}

const create = async (req, res) => {
    const data = await db.users.findOne({
        where: { username: req.body.username },
    });
    if (data) res.status(409).send("username already exists!");
    else {
        console.log(req.body);
        const users = await db.users.create({
            ...req.body,
        });
        res.send(users);
    }
};
  
const update = async (req, res) => {
    const data = await db.users.findOne({
        where: { id: req.params.id },
    });
    if (!data) res.status(404).send("user not found!");
    else {
        await db.users.update(
            {
            ...req.body,
            },
            {
            where: { id: req.params.id },
            }
        );
        const user = await db.users.findOne({
            where: { id: req.params.id },
        });
        res.send(user);
    }
};
  
const deleteById = async (req, res) => {
    const data = await db.users.findOne({
        where: { id: req.params.id },
    });
    if (!data) res.status(404).send("user not found!");
    else {
        await db.users.update(
        {
            status: 0,
        },
        {
            where: { id: req.params.id },
        }
        );
        res.send("user successfully deleted!");
    }
};

module.exports = {
    get,
    // getMe,
    getById,
    create,
    update,
    deleteById,
  };
  