// Bạn có thể thêm mã JavaScript ở đây để tạo và điều khiển dữ liệu trong bảng
fetch('http://157.230.37.12:3000/api/users')
    .then(response => response.json()) // Chuyển đổi phản hồi sang văn bản
    .then(data => {
        // Hiển thị dữ liệu trả về trong phần tử có id là 'dataDisplay'
        const users = data.data;
        function createUserRow(user, index) {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${index + 1}</td>
                <td>${user.id}</td>
                <td>${user.username}</td>
                <td>${user.permissions}</td>
                <td>
                    <button onclick="openModalEdit('${user.id}')">Sửa</button>
                    <button onclick="openModalDelete('${user.id}')">Xóa</button>
                </td>
            `;
            return row;
        }

        // Get the tbody element where user rows will be appended
        const tbody = document.querySelector('tbody');

        // Loop through users and append rows to tbody
        users.forEach((user, index) => {
            const row = createUserRow(user, index);
            tbody.appendChild(row);
        });
    })
    .catch(error => console.error('Lỗi khi nhận dữ liệu:', error));
//***************************** Turn On Modal Add*******************************************
var modal = document.getElementById("myModal");
// Lấy button mở modal
var btn = document.querySelector(".btn-add");
// Lấy phần tử span đóng modal
var span = document.getElementsByClassName("close")[0];
// Khi người dùng click vào nút, mở modal
function openModal() {
  modal.style.display = "block";
}
// Khi người dùng click vào nút đóng (x), đóng modal
function closeModal() {
  modal.style.display = "none";
}
// Khi người dùng click bất kỳ đâu ngoài modal, đóng modal
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}

document.getElementById('loginForm-addUser').addEventListener('submit', function(event) {
  event.preventDefault(); // Ngăn chặn form gửi yêu cầu mặc định

  // Lấy giá trị từ các trường form
  const username = document.getElementById('username').value;
  const password = document.getElementById('password').value;
  const repassword = document.getElementById('repassword').value;
  const permission_id = document.getElementById('permission_id').value;

  // Kiểm tra mật khẩu và xác nhận mật khẩu có khớp nhau không
  if (password !== repassword) {
      alert('Mật khẩu và xác nhận mật khẩu không khớp!');
      return;
  }

  // Tạo đối tượng user
  const newUser = {
      username: username,
      password: password,
      permission_id: permission_id
  };

  // Gửi yêu cầu POST tới API
  fetch('http://157.230.37.12:3000/api/users', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json'
      },
      body: JSON.stringify(newUser)
  })
  .then(response => response.json())
  .then(data => {
      if (data.id) {
          // Nếu thêm thành công, đóng modal và cập nhật bảng dữ liệu
          closeModal();
          addUserToTable(data);
      } else {
          // Nếu có lỗi, hiển thị thông báo lỗi
          alert('Lỗi khi thêm tài khoản: ' + data.message);
      }
  })
  .catch(error => {
      console.error('Lỗi khi gửi yêu cầu:', error);
      alert('Lỗi khi gửi yêu cầu: ' + error.message);
  });
});

// Hàm thêm user vào bảng dữ liệu
function addUserToTable(user) {
  const tbody = document.querySelector('tbody');
  const index = tbody.children.length; // Lấy số thứ tự tiếp theo

  const row = document.createElement('tr');
  row.innerHTML = `
      <td>${index + 1}</td>
      <td></td>
      <td>${user.username}</td>
      <td>${user.permission_id}</td>
      <td>
          <button onclick="openModalEdit()">Sửa</button>
          <button onclick="openModalDelete()">Xóa</button>
      </td>
  `;
  tbody.appendChild(row);
}

// *************************************** TURN ON MODAL EDIT**********************************
var modalEdit = document.getElementById("myModalEdit");
document.getElementById('loginForm-updateUser').addEventListener('submit', function(event) {
  event.preventDefault(); // Ngăn chặn form gửi yêu cầu mặc định

  // Lấy giá trị từ các trường form
  const id = document.getElementById('id-edit').value;
  const username = document.getElementById('username-edit').value;
  const password = document.getElementById('password-edit').value;
  const permissionId = document.getElementById('permission_id-edit').value;

  // Tạo đối tượng user
  const updatedUser = {
      username: username,
      password: password,
      permission_id: permissionId
  };

  // Gửi yêu cầu PUT tới API
  fetch(`http://157.230.37.12:3000/api/users/${id}`, {
      method: 'PUT',
      headers: {
          'Content-Type': 'application/json'
      },
      body: JSON.stringify(updatedUser)
  })
    .then(response => {
    if (!response.ok) {
        // Nếu phản hồi không thành công, ném lỗi để chuyển sang phần catch
        return response.json().then(errorData => {
            throw new Error(errorData.message || 'Có lỗi xảy ra');
        });
    }
    return response.json();
})
    .then(data => {
        if (data) {
            // Nếu cập nhật thành công, đóng modal và cập nhật bảng dữ liệu
            closeModalEdit();
            
            location.reload();  // Cập nhật dữ liệu trả về của API, reload trang
        }
    })
    .catch(error => {
        console.error('Lỗi khi gửi yêu cầu:', error);
        alert('Lỗi khi gửi yêu cầu: ' + error.message);
    });
});

//Hiển thị dữ liệu lên form
function openModalEdit(userId) {
  // Lấy thông tin người dùng hiện tại từ bảng hoặc từ API
  fetch(`http://157.230.37.12:3000/api/users/${userId}`)
  .then(response => response.json())
  .then(user => {
      // Điền thông tin người dùng vào form
      document.getElementById('id-edit').value = user.id;
      document.getElementById('username-edit').value = user.username;
      document.getElementById('permission_id-edit').value = user.permission_id;
      // Hiển thị modal
      modalEdit.style.display = "block";
  })
  .catch(error => {
      console.error('Lỗi khi lấy dữ liệu người dùng:', error);
      alert('Lỗi khi lấy dữ liệu người dùng: ' + error.message);
  });
}
// cập nhật lên bảng
function updateUserInTable(user) {
  // Tìm hàng có user id tương ứng và cập nhật thông tin
  const rows = document.querySelectorAll('tbody tr');
  rows.forEach(row => {
      if (row.children[1].textContent === user.id) {
          row.children[2].textContent = user.username;
          row.children[3].textContent = user.permission_id;
      }
  });
}




// Lấy phần tử span đóng modal
var span = document.getElementsByClassName("close")[0];

// Khi người dùng click vào nút, mở modal
// function openModalEdit() {
//     modalEdit.style.display = "block";
// }

// Khi người dùng click vào nút đóng (x), đóng modal
function closeModalEdit() {
    modalEdit.style.display = "none";
}

// Khi người dùng click bất kỳ đâu ngoài modal, đóng modal
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}

// ^********************************** TURN ON XÓA TÀI KHOẢN*********************
var modalDelete = document.getElementById("myModalDelete");

// Lấy button mở modal


// Lấy phần tử span đóng modal
var span = document.getElementsByClassName("close")[0];

// Khi người dùng click vào nút, mở modal
function openModalDelete(userId) {
    modalDelete.setAttribute('data-user-id', userId);
    modalDelete.style.display = "block";
}

// Khi người dùng click vào nút đóng (x), đóng modal
function closeModalDelete() {
    modalDelete.style.display = "none";
}

// Khi người dùng click vào nút xác nhận, xóa tài khoản
function deleteAccount() {
  const userId = modalDelete.getAttribute('data-user-id');
  fetch(`http://157.230.37.12:3000/api/users/${userId}`, {
    method: 'DELETE'
  })
  .then(response => {
      if (response.status==200) {
          alert("Tài khoản đã được xóa thành công!");
          closeModalDelete(); // Đóng modal sau khi xóa
          location.reload(); // Tải lại trang để cập nhật danh sách tài khoản
      } else {
          throw new Error('Có lỗi xảy ra khi xóa tài khoản');
      }
  })
  .catch(error => {
      console.error('Lỗi khi xóa tài khoản:', error);
      alert('Lỗi khi xóa tài khoản: ' + error.message);
  });
}